setwd("C:/Users/Parthasarathy/Desktop/SWC_fall2018")
3+5
sqrt(64)
s()
3+
2
10
prit("Hello World")
print("Helo World")
print(64)
print("wow")
name
name
name
price
ls()
name
name <-"Jane"
print(name)
price<-3.99
price
#list of objects
ls()
mass <-64
mass
sqrt(mass) # function with argument provided
res<-sqrt(mass)
res
mass <-64
mass
getwd()
?plot
mass <-47.5
age <-122
height <-150
mass<-mass*2.3
mass
age
height<-height+20
height
#install packages
install.packages("knitr")
library(knitr)
install.packages("stringi")
#data types and data structures
#single element data structures : smalles units in R
age<-45
length(age)
str(age)
score<-79
is.integer(score)
typeof(score)
typeof(is.integer(score))
is.logical(is.numeric(typeof(is.integer(score))))
step1<-is.integer(score)
step1
is.integer(score)
typeof(score)
#data structure with multiple elements
#vector : collection of element of the same type
#how to create a vetor ?
#c(): concatenata function
v<-c(1,2,3,45)
v<-c(1,2,3,45)
v
v<-(1:10,100)
v<-c(1:10,100)
v
length(v)
str(v)
#view parts of data / vector
head(v,n=2)
tail(v,n=3)
v1
#manipulate
v1<-2*v
v1
v2
#add a vector
#let's create v2 and add v2 to v1
v2 <- c(1:5)
v2
v3<-v1+v2
v3
#character vector
v4<-c("Jane","John","Farah")
v4
typeof(v4)
#change data type
v3<-as.character(v3)
v3
typeof(v3)
str(v3)
#matrices,factors,list
#matrices : 2d vectors
m<-matrix(c(1:18),3,6)
m
dim(m)
#factors
#special vectors used to represent categorical data
#use factor function
continent <-factor(c("Asia","America","Europe"))
continent
str(continent)
#Lists : generic vector collection of elements with diff data types - numbers and char
l<-list("Afghanistan","Albania",1952,876897)
l
typeof(l)
str(l)
element_1<-c("chicken","soup","salad","tead")
element_1
element_2<-c("liquid","solid")
element_2
element_3<-c(4.99,2.99,3.29,1.89)
element_3
element_2<-factor(c("liquid","solid")
element_2
element_2<-factor(c("liquid","solid")
element_2
element_2<-factor(c("liquid","solid"))
element_2
element_3<-c(4.99,2.99,3.29,1.89)
element_3
element_2<-factor(c("liquid","solid","solid","liquid"))
myorder<-list(element_1,element_2,element_3)
myorder
#dataframe
myorder_df=data.frame(element_1,element_2,element_3)
myorder_df
element_2<-factor(c("solid","liquid","solid","liquid"))
element_2
#dataframe
myorder_df=data.frame(element_1,element_2,element_3)
myorder_df
View(myorder_df)
View(myorder_df)
dim(myorder_df)
str(myorder_df)
## DATA FRAME:
myorder_df=data.frame(element_1,element_2,element_3)
myorder_df
dim(myorder_df)
str(myorder_df)
v[2]
v[c(3:6)]
v[-c(3:6)]
v[3:6]
myorder_df[1]
myorder_df[[1]]
typeof(myorder_df[1])
typeof(myorder_df[[1]])
myorder_df(1:3,)
myorder_df[1:3,]
#subsetting by name
myorder_df $element_1
v<-c(5,1,3,4,5)
v(v==5)
v<-c(5,1,3,4,5)
v[v==5]
v==5
df1<-myorder_df[$element_2="solid",]
df1<-myorder_df[myorder_df$element_2="solid",]
df1<-myorder_df[myorder_df$element_2=="solid",]
df1
df2<-myorder_df[myorder_df$element_3>3,]
df2
df3<-myorder_df[myorder_df$element_2=="solid"]
df3
myorder_df$element_2==solid
myorder_df$element_2=="solid"
getwd()
##GapMinder dataset
myData <-read.table("Data\gapminder.txt")
##GapMinder dataset
myData <-read.table("Data/gapminder.txt")
myData
str(myData)
##GapMinder dataset
mydata <-read.table("Data/gapminder.txt")
mydata
str(mydata)
typeof(mydata)
typeof(mydata$V2)
View(mydata)
View(mydata)
mydata[mydata[,c(3:5)]]
mydata[mydata[,c(3,5)]]
mydata[mydata[,c(3,5)]]
mydata[mydata[,c(3,5)]]
mydata
mydata[c(3,5)]
mydata[,c(3,5)]
unique(mydata$V1)
mydata
mydatafull<-read.table("Data/gapminder.txt")
mydatafull
View(mydatafull)
View(mydatafull)
canada<-mydatafull[mydatafull$v1=="Canada",]
canada
plot(canada$year,canada$v4,col="blue",type="l")
mydatafull
canada
mydatafull
mydatafull$v1
mydatafull$V1
?read.table
mydatafull$V1
canada<-mydatafull[mydatafull$V1=="Canada",]
canada
plot(canada$year,canada$v4,col="blue",type="l")
plot(canada$year,canada$V4,col="blue",type="l")
canada
plot(canada$V3,canada$V4,col="blue",type="l")
?plot
plot(canada$V3,canada$V4,col="blue",type="l")
mydatafull<-read.table("Data/gapminder.txt",header = TRUE)
mydatafull
canada<-mydatafull[mydatafull$country=="Canada",]
canada
plot(canada$year,canada$lifeExp,col="blue",type="l")
canada
mydata[mydata$lifeExp<70,]
mydatafull[mydatafull$lifeExp<70,]
unique(mydatafull$country)
#close device
dev.off
#close device
dev.off()
canada<-mydatafull[mydatafull$country=="Canada",]
source('C:/Users/Parthasarathy/Desktop/SWC_fall2018/R_intro/Plot_lifeExp.R')
dt=read.table("Data/gapminder.txt",header = TRUE)
dt
highlife=dt[$v4]
highlife=dt[dt$v4]
highlife
max(highlife)
dt <- read.table("Data/gapminder.txt",header = TRUE)
highlife <- dt[dt$v4]
max(highlife)
highlife
View(highlife)
highlife <- dt$v4
dt
max(dt$lifeExp)
dt[dt$lifeExp==82.603,]
setwd("~/Desktop/SWC_fall2018")
setwd("C:/Users/Parthasarathy/Desktop/SWC_fall2018")
x<-sqrt(64)
x
fahr_to_Kelvin <- function(temp){
kelvin<-((temp-32)*(5/9))+273.15
kelvin
}
fahr_to_Kelvin(32)
fahr_to_Kelvin("32")
View(fahr_to_Kelvin)
print(paste('Boiling point of water:',fahr_to_Kelvin(-101)))
print(paste('Boiling point of water:',fahr_to_Kelvin(101)))
print(paste('Boiling point of water:',fahr_to_Kelvin(212)))
print(paste('Absolute zero in celsius:',kelvin_to_celsius(0)))
kelvin_to_celsius <- function(tmp)
{
celsius <-temp-273.15
celsius
}
print(paste('Absolute zero in celsius:',kelvin_to_celsius(0)))
celsius <-tmp-273.15
kelvin_to_celsius <- function(tmp)
{
celsius <-tmp-273.15
celsius
}
print(paste('Absolute zero in celsius:',kelvin_to_celsius(0)))
print(paste('Absolute zero in celsius:',kelvin_to_celsius(0))
print(paste('Absolute zero in celsius:',kelvin_to_celsius(0)))
print(paste('Absolute zero in celsius:',kelvin_to_celsius(0)))
fahr_to_celsius(function temp){
temp_k<-fahr_to_Kelvin(temp)
resul<-kelvin_to_celsius(temp_k)
result
}
fahr_to_celsius<-(function temp){
temp_k<-fahr_to_Kelvin(temp)
resul<-kelvin_to_celsius(temp_k)
result
}
fahr_to_celsius<-function (temp){
temp_k<-fahr_to_Kelvin(temp)
resul<-kelvin_to_celsius(temp_k)
result
}
print(paste("Freezing point of water in celsius", fahr_to_celsius(32.0)))
fahr_to_celsius<-function (temp){
temp_k<-fahr_to_Kelvin(temp)
resul<-kelvin_to_celsius(temp_k)
result
}
print(paste("Freezing point of water in celsius", fahr_to_celsius(32.0)))
result<-kelvin_to_celsius(temp_k)
fahr_to_celsius<-function (temp){
temp_k<-fahr_to_Kelvin(temp)
result<-kelvin_to_celsius(temp_k)
result
}
print(paste("Freezing point of water in celsius", fahr_to_celsius(32.0)))
fence<-function(original,wrap){
ans<-paste(wrap)
ans<-paste(original)
ans<-paste(wrap)
ans
}
print(fence('Original','******'))
fence<-function(original,wrap){
ans<-paste(wrap,original,wrap)
ans
}
print(fence('Original','******'))
fence<-function(original,wrap){
ans<-paste0(wrap,original,wrap)
paste0()
}
print(fence('Original','******'))
fence<-function(original,wrap){
ans<-paste0(wrap,original,wrap)
return ans
}
fence<-function(original,wrap){
ans<-paste0(wrap,original,wrap)
return ans
}
fence<-function(original,wrap){
ans<-paste0(wrap,original,wrap)
return (ans)
}
print(fence('Original','******'))
# read it
gm <- read.table(fh,header = TRUE)
# file location
fh <- 'Data\gapminder.txt'
# file location
fh <- 'Data/gapminder.txt'
# read it
gm <- read.table(fh,header = TRUE)
View(gm)
#select the rows for the country Albania and store it
albdata<-gm[gm$country=="Albania",]
View(albdata)
#select the column for gdp from albaniadata
albgdp<-albdata[albdata$gdpPercap]
albgdp<-albdata[albdata$gdpPercap]
albgdp<-albdata$gdpPercap
albgdp
# compute the avg gdp for the country over the years
albavggdp <- mean(albgdp)
print('The average gdp for Albania is :' ,albavggdp)
print(paste('The average gdp for Albania is :' ,albavggdp))
getavggdppercapita <- function(country,gm){
#select the country from the given dset
countrydata<-gm[gm$country==country]
mean(countrydata)
}
gdpusa <-getavggdppercapita('United_States',gm)
# read it
gm <- read.table(fh,header = TRUE)
getavggdppercapita <- function(country,gm){
#select the country from the given dset
countrydata<-gm[gm$country==country]
# compute the mean from it
mean(countrydata)
}
gdpusa <-getavggdppercapita('United_States',gm)
#select the rows for the country Albania and store it
albdata<-gm[gm$country=="Albania",]
print(paste('The average gdp for Albania is :' ,albavggdp))
gdpusa <-getavggdppercapita("United_States",gm)
#select the country from the given dset
countrydata<-gm[gm$country==country,]
getavggdppercapita <- function(country,gm){
#select the country from the given dset
countrydata<-gm[gm$country==country,"gdpPercap"]
# compute the mean from it
mean(countrydata)
}
gdpusa <-getavggdppercapita("United_States",gm)
gdpusa
print (paste('GDP per cap of USA is',gdpusa))
print (paste('GDP per cap of Canada is',gdpcanada))
gdpcanada <-getavggdppercapita("Canada",gm)
gdpmexico<-getavggdppercapita("Mexico",gm)
print (paste('GDP per cap of Canada is',gdpcanada))
print (paste('GDP per cap of Mexico is',gdpmexico))
